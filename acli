#!/bin/bash
#__     _______ ____ _____ ___ _    _   ___  __
#\ \   / / ____|  _ \_   _|_ _| |  | | | \ \/ /
# \ \ / /|  _| | |_) || |  | || |  | | | |\  /
#  \ V / | |___|  _ < | |  | || |__| |_| |/  \
#   \_/  |_____|_| \_\|_| |___|_____\___//_/\_\
#
# Vertilux Ltd.
# https://vertilux.com
# https://github.com/vertilux
# Description: Simple bash script wrapper to ineteract with ansible.

package="acli"
COLUMNS=12

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "__     _______ ____ _____ ___ _    _   ___  __ "
      echo "\ \   / / ____|  _ \_   _|_ _| |  | | | \ \/ / "
      echo " \ \ / /|  _| | |_) || |  | || |  | | | |\  /  "
      echo "  \ V / | |___|  _ < | |  | || |__| |_| |/  \  "
      echo "   \_/  |_____|_| \_\|_| |___|_____\___//_/\_\ "
      echo " "
      echo "$package - Ansible CLI wrapper writen in bash."
      echo " "
      echo "$package [options] [arguments]"
      echo " "
      echo "$(tput setaf 1)Instructions for Windows Playbooks"
      echo "$(tput setaf 2)options:$(tput setaf 7)"
      echo "-r, --reboot-host       Restart host of group of hosts."
      echo "-d, --disk-space        Display total disck size."
      echo "    If you know the host you can pass it as an argument."
      echo "    Or simply run it as: ./acli -d, this will promt the iventory."
      echo "-l, --list-hosts        List inventory hosts."
      echo "    If you know the host group you can pass it as an argument."
      echo "    Or run it as ./acli -l to list all available hosts."
      echo "-p, --ping              Ping windows servers"
      echo "-s, --restart-sql       Restart SQL service."
      echo "    Make sure pass the required arguments: host name and service."
      echo " "
      echo "$(tput setaf 1)Instructions for QNAP NAS"
      echo "$(tput setaf 2)options:$(tput setaf 7)"
      echo "--del                   Delete old backups (older than 3 days)."
      echo " "
      echo "$(tput setaf 1)Instructions for ERP Web Application"
      echo "$(tput setaf 2)options: $(tput setaf 4)erp$(tput setaf 7)"
      echo "-s, --restart-sidekiq   Restart sidekiq queue processing job."
      echo "-m, --maintenance       Set/Unset ERP to maintenance mode."
      echo "-p, --restart-passenger Restart Phusion Passenger application server."
      echo "-n, --restart-nginx     Restart Nginx web server."
      echo "-u, --update-ip         Update DB IP address."
      echo " "
      echo "$(tput setaf 1)Instructions for Flask API"
      echo "$(tput setaf 2)options: $(tput setaf 4)api$(tput setaf 7)"
      echo "-d, --deploy            Deploy new version."
      echo " "
      exit 0
      ;;

    ###########################
    ###   Windows Modules   ###
    ###########################

    # Restart Servers
    -r|--reboot-host)
      shift
      if test $# -gt 0; then
          echo "No need to pass any arguments with this option."
          echo "Please try: ./acli -r"
      else
        hosts=`awk '{print $1}' windows/inventory`
        PS3='Select host or group: '
        select host in $hosts; do
          play=$( ansible-playbook windows/restart-server.yml --extra-vars="target=$host" --ask-vault-pass -i windows/inventory )
          output=$(echo "$play" -1)
          echo $play
          break
        done
      fi
      shift
      ;;

    # Display disk size
    -d|--disk-facts)
      shift
      if test $# -gt 0; then
        play=$( ansible-playbook windows/disck-facts.yml --extra-vars="target=$1" --ask-vault-pass -i windows/inventory )
        msg=$(echo "$play" | awk 'gsub(/"msg"/,x)')
        recap=$(echo "$play" | grep "ok=")
        echo "Disk size $msg"
        echo "$recap"
      else
        hosts=`awk '{print $1}' windows/inventory`
        PS3='Select host or group: '
        select host in $hosts; do
          play=$( ansible-playbook windows/disck-facts.yml --extra-vars="target=$host" --ask-vault-pass -i windows/inventory )
          msg=$(echo "$play" | awk 'gsub(/"msg"/,x)')
          recap=$(echo "$play" | grep "ok=")
          echo "Disk size $msg"
          echo "$recap"
          break
        done
      fi
      shift
      ;;

    # List host in ansible inventory for windows module
    -l|--list-hosts)
      shift
      if test $# -gt 0; then
        counter=0
        play=$( ansible-playbook windows/list-hosts.yml -i windows/inventory --list-hosts --extra-vars="target=$1" )
        hosts=$(echo $play | cut -f13- -d' ' )
        for h in $hosts; do
          echo $h
          counter=$((counter+1))
        done
        echo "$(tput setaf 2)Total hosts: $(tput bold)($counter)"
      else
        counter=0
        play=$( ansible all --list-hosts -i windows/inventory | sed 's/.*\(:.*\)/\1/g' | sed 's|[:,]||g' )
        for h in $play; do
          echo $h
          counter=$((counter+1))
        done
        echo "$(tput setaf 2)Total hosts: $(tput bold)($counter)"
      fi
      shift
      ;;

    # Ping all inventory
    -p|--ping)
      shift
      if test $# -gt 0; then
          echo "No need to pass any arguments with this option."
          echo "Please try: ./acli -p"
      else
        play=$( ansible-playbook windows/ping.yml -i windows/inventory --ask-vault-pass )
        recap=$(echo "$play" | grep "ok=" | awk '{print $1, $3, $5}')
        echo $recap
      fi
      shift
      ;;

    # Restart SQL Services (MSSQLSERVER or SQLSERVERAGENT)
    -s|--restart-sql)
      shift
      if test $# -gt 1; then
        play=$( ansible-playbook windows/restart-sql-service.yml -i windows/inventory --extra-vars="target=$1 service=$2" --ask-vault-pass )
        error=$(echo "$play" | grep "fatal")
        recap=$(echo "$play" | grep "ok=" | awk '{print $1, $3, $6}')
        echo "$(tput setaf 1) $error"
        echo "$(tput setaf 7) $recap"
      else
        echo "Wrong number of arguments, Example: ./acli -s VXACCPAC2 MSSQLSERVER"
      fi
      shift
      ;;


    ###########################
    ###        QNAP         ###
    ###########################

    # Remove backups files older than 3 days.
    --del)
      shift
        play=$( ansible-playbook qnap/remove-old-sql-backups.yml -i qnap/inventory --ask-vault-pass )
        error=$(echo "$play" | grep "fatal")
        recap=$(echo "$play" | grep "ok=" | awk '{print $1, $3, $6}')
        if [ -z "$error" ]; then
           echo "$(tput setaf 1) $error"
           echo "$(tput setaf 7) $recap"
        else
           echo "$(tput setaf 7) $recap"
        fi
      shift
      ;;


    ###########################
    ###        ERP         ###
    ###########################

    erp)
      shift
      if test $# -gt 0; then
        case "$1" in
          # Restart sidekiq service
          -s|--restart-sidekiq)
            shift
              PS3="$(tput setaf 4) Select environment: $(tput setaf 7)"
              envs=(accltd bzidat covdat espdat mxpdat prndat pwcdat rdmdat saldat wcpdat)
              select env in "${envs[@]}"; do
                play=$( ansible-playbook erp/playbooks/restart-sidekiq.yml -K -i erp/playbooks/inventory --extra-vars="env=$env" )
                error=$(echo "$play" | grep "fatal")
                recap=$(echo "$play" | grep "ok=" | awk '{print $1, $3, $4, $6}')
                if [ -z "$error" ]; then
                  echo "$(tput setaf 1) $error"
                  echo "$(tput setaf 7) $recap"
                  exit 0
                else
                  echo "$(tput setaf 7) $recap"
                  exit 0
                fi
              done
            shift
            ;;

          # Set or Unset maintenance mode
          -m|--maintenance)
            shift
              PS3="$(tput setaf 4) Select environment: $(tput setaf 7)"
              envs=(accltd bzidat covdat espdat mxpdat prndat pwcdat rdmdat saldat wcpdat)
              select env in "${envs[@]}"; do
                play=$( ansible-playbook erp/playbooks/maintenance-mode.yml -i erp/playbooks/inventory --extra-vars="env=$env" )
                error=$(echo "$play" | grep "fatal")
                recap=$(echo "$play" | grep "ok=" | awk '{print $1, $3, $4, $6}')
                if [ -z "$error" ]; then
                  echo "$(tput setaf 1) $error"
                  echo "$(tput setaf 7) $recap"
                  exit 0
                else
                  echo "$(tput setaf 7) $recap"
                  exit 0
                fi
              done
            shift
            ;;

          # Restart Passenger App Server
          -p|--restart-passenger)
            shift
              PS3="$(tput setaf 4) Select environment: $(tput setaf 7)"
              envs=(accltd bzidat covdat espdat mxpdat prndat pwcdat rdmdat saldat wcpdat)
              select env in "${envs[@]}"; do
                play=$( ansible-playbook erp/playbooks/restart-passenger.yml -i erp/playbooks/inventory --extra-vars="env=$env" )
                error=$(echo "$play" | grep "fatal")
                recap=$(echo "$play" | grep "ok=" | awk '{print $1, $3, $4, $6}')
                if [ -z "$error" ]; then
                  echo "$(tput setaf 1) $error"
                  echo "$(tput setaf 7) $recap"
                  exit 0
                else
                  echo "$(tput setaf 7) $recap"
                  exit 0
                fi
              done
            shift
            ;;

          # Restart Nginx Web Server
          -n|--restart-nginx)
            shift
              play=$( ansible-playbook erp/playbooks/restart-nginx.yml -K -i erp/playbooks/inventory )
              error=$(echo "$play" | grep "fatal")
              recap=$(echo "$play" | grep "ok=" | awk '{print $1, $3, $4, $6}')
              if [ -z "$error" ]; then
                echo "$(tput setaf 1) $error"
                echo "$(tput setaf 7) $recap"
                exit 0
              else
                echo "$(tput setaf 7) $recap"
                exit 0
              fi
            shift
            ;;

          # Restart Nginx Web Server
          -u|--update-ip)
            shift
              play=$( ansible-playbook erp/playbooks/update-database-ip.yml -i erp/playbooks/inventory )
              error=$(echo "$play" | grep "fatal")
              recap=$(echo "$play" | grep "ok=" | awk '{print $1, $3, $4, $6}')
              if [ -z "$error" ]; then
                echo "$(tput setaf 1) $error"
                echo "$(tput setaf 7) $recap"
                exit 0
              else
                echo "$(tput setaf 7) $recap"
                exit 0
              fi
            shift
            ;;
        esac
      else
        echo "Wrong number of arguments, try ./acli -h for help"
      fi
      shift
      ;;

    ###########################
    ###      VTX API        ###
    ###########################

    api)
      shift
      if test $# -gt 0; then
        case "$1" in
          # Deploy new version of Flask API
          -d|--deploy)
            shift
              play=$( ansible-playbook api/deploy/entry_point.yml -K -i api/deploy/inventory )
              error=$(echo "$play" | grep "fatal")
              recap=$(echo "$play" | grep "ok=" | awk '{print $1, $3, $4, $6}')
              if [ -z "$error" ]; then
                echo "$(tput setaf 1) $error"
                echo "$(tput setaf 7) $recap"
                exit 0
              else
                echo "$(tput setaf 7) $recap"
                exit 0
              fi
            shift
            ;;
        esac
      else
        echo "Wrong number of arguments, try ./acli -h for help"
      fi
      shift
      ;;
    *)
    break
    ;;
  esac
done
