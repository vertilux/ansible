---
- name: Restart selected Proxmox VMs (via SSH to PVE nodes)
  hosts: localhost
  gather_facts: false

  vars:
    # Debe venir del Survey (Multiple Choice - multiple)
    vm_keys_selected: "{{ vm_keys_selected | default([]) }}"
    pause_seconds: 120

  pre_tasks:
    # 1) Buscar los dicts en el inventario (group_vars:all.yml del inventario "Hosts")
    - name: Locate proxmox_vms dict anywhere in inventory
      set_fact:
        proxmox_vms_all: >-
          {{
            hostvars | dict2items
            | map(attribute='value.proxmox_vms')
            | select('defined') | list | first | default({})
          }}

    - name: Locate pve_nodes map anywhere in inventory
      set_fact:
        pve_nodes_all: >-
          {{
            hostvars | dict2items
            | map(attribute='value.pve_nodes')
            | select('defined') | list | first | default({})
          }}

    - name: Sanity check inventory variables were found
      assert:
        that:
          - proxmox_vms_all | length > 0
          - pve_nodes_all   | length > 0
        fail_msg: "Inventory is missing proxmox_vms and/or pve_nodes."

    - name: Build list of all known VM keys
      set_fact:
        all_vm_keys: "{{ proxmox_vms_all | dict2items | map(attribute='key') | list | sort }}"

    # 2) Mostrar lo que mandó el Survey
    - name: Show Survey payload and valid keys
      debug:
        msg: |
          vm_keys_selected = {{ vm_keys_selected | default([]) }}
          valid keys       = {{ all_vm_keys }}

    # 3) Validar selección
    - name: Validate survey selection (not empty, not all, valid keys)
      assert:
        that:
          - vm_keys_selected is sequence
          - vm_keys_selected | length > 0
          - vm_keys_selected | length < all_vm_keys | length
          - (vm_keys_selected | difference(all_vm_keys)) | length == 0
        fail_msg: >-
          Invalid selection. Choose SOME (not all) of these keys:
          {{ all_vm_keys | join(', ') }}

    # 4) Construir objetos seleccionados {key, value:{vmid,pve_node,...}}
    - name: Build selected VM objects
      set_fact:
        selected_vms: >-
          {{
            proxmox_vms_all
            | dict2items
            | selectattr('key','in', vm_keys_selected)
            | list
          }}

    - name: Ensure selected_vms is not empty (defensive)
      assert:
        that:
          - selected_vms | length > 0
        fail_msg: "Nothing to do: selected_vms resolved empty."

    - name: Show execution plan (what will be rebooted)
      debug:
        var: selected_vms

    # (opcional) Probar reachability de los nodos PVE a los que vamos a delegar
    - name: Test SSH reachability to needed PVE nodes
      command: /bin/true
      delegate_to: "{{ pve_nodes_all[item] }}"
      loop: "{{ selected_vms | map(attribute='value.pve_node') | list | unique }}"
      loop_control:
        label: "{{ item }} -> {{ pve_nodes_all[item] }}"

  tasks:
    - name: Reboot VM on its PVE node (SSH port 22; not 8006)
      delegate_to: "{{ pve_nodes_all[item.value.pve_node] }}"
      become: true
      vars:
        vmid: "{{ item.value.vmid }}"
        vm_name: "{{ item.key }}"
        pve_node: "{{ item.value.pve_node }}"
      shell: |
        set -euo pipefail
        echo "Rebooting {{ vm_name }} (vmid={{ vmid }}) on {{ pve_node }}..."
        qm reboot {{ vmid }}
      loop: "{{ selected_vms }}"
      loop_control:
        label: "{{ item.key }} -> {{ item.value.pve_node }} (vmid={{ item.value.vmid }})"

    - name: Pause {{ pause_seconds }}s between VMs
      pause:
        seconds: "{{ pause_seconds }}"
      loop: "{{ selected_vms }}"
      loop_control:
        label: "{{ item.key }}"
