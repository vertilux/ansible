---
- name: Reboot Proxmox VMs by role (via SSH)
  hosts: pve
  gather_facts: false
  run_once: true

  vars:
    # Survey
    target_role: "{{ target_role | default('granite') }}"   # role a reiniciar
    max_parallel: "{{ max_parallel | default(2) }}"         # VMs en paralelo
    shutdown_timeout: "{{ shutdown_timeout | default(120) }}"  # seg

  tasks:
    - name: Build VM list for role={{ target_role }}
      delegate_to: localhost
      set_fact:
        _vm_keys: >-
          {{
            proxmox_vms
            | dict2items
            | selectattr('value.role','defined')
            | selectattr('value.role','equalto', target_role)
            | map(attribute='key')
            | list | sort
          }}

    - name: Expand VM objects (id, host/node, ipâ€¦)
      delegate_to: localhost
      set_fact:
        _vms: "{{ _vm_keys | map('extract', proxmox_vms) | list }}"

    - name: Show plan
      delegate_to: localhost
      debug:
        msg: |
          Role: {{ target_role }}
          Count: {{ _vms | length }}
          VMs:
          {%- for k in _vm_keys -%}
            - {{ k }} (id={{ proxmox_vms[k].id }}, node={{ proxmox_vms[k].host }}, ip={{ proxmox_vms[k].ip | default('n/a') }})
          {%- endfor %}

    - name: Reboot VMs on their owning Proxmox node
      throttle: "{{ max_parallel | int }}"
      block:
        - name: Soft shutdown (qm shutdown) {{ item.name | default(item.key) }} (id={{ item.id }})
          delegate_to: "{{ pve_nodes[item.host] | default(item.host) }}"
          become: true
          command: "qm shutdown {{ item.id }} --timeout {{ shutdown_timeout }}"
          register: _shutdown
          failed_when: false

        - name: Force stop if still running
          delegate_to: "{{ pve_nodes[item.host] | default(item.host) }}"
          become: true
          command: "qm stop {{ item.id }}"
          when: _shutdown.rc != 0

        - name: Start VM
          delegate_to: "{{ pve_nodes[item.host] | default(item.host) }}"
          become: true
          command: "qm start {{ item.id }}"

        - name: (Optional) Wait for SSH to come up
          delegate_to: localhost
          wait_for:
            host: "{{ item.ip }}"
            port: 22
            timeout: 120
          when: item.ip is defined
      loop: "{{ _vm_keys | map('extract', proxmox_vms) | list }}"
      loop_control:
        label: "{{ item.name | default(item.key) }}"
