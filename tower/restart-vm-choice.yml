---
- name: Reboot VMs by role (optionally pick specific VMs)
  hosts: vms
  become: yes
  gather_facts: no

  vars:
    # === Survey vars ===
    # target_role: (choice) granite, ts, ...
    # vm_keys: (optional CSV) hostnames/keys (as aparecen en el inventario) para limitar dentro del role
    # reboot_timeout: (int) segundos para esperar que vuelva
    target_role: "{{ target_role }}"
    vm_keys: "{{ vm_keys | default('') }}"
    reboot_timeout: "{{ reboot_timeout | default(120) | int }}"

  pre_tasks:
    - name: Normalize user list (supports list or CSV)
  set_fact:
    vm_keys_list: >-
      {{
        vm_keys if vm_keys is sequence
        else (vm_keys | string | regex_replace('\\s+','') | split(','))
      }}

    - name: Decide if this host is candidate by role
      set_fact:
        _role_match: "{{ (hostvars[inventory_hostname].role | default('')) == target_role }}"

    - name: If user specified vm_keys, check membership
      set_fact:
        _key_match: "{{ (vm_keys_list | length == 0) or (inventory_hostname in vm_keys_list) }}"
      when: _role_match

    - name: Show plan (first host only)
      debug:
        msg: >
          Role={{ target_role }} | User list={{ vm_keys_list | default([]) }}
          -> Will reboot only hosts where role matches and (if provided) name âˆˆ list.
      run_once: true

  tasks:
    - name: Skip hosts that do not match filters
      meta: end_host
      when: not (_role_match | default(false)) or not (_key_match | default(true))

    - name: Reboot host (graceful)
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout }}"
      register: rb

    - name: Report reboot result
      debug:
        msg: "Rebooted {{ inventory_hostname }} (role={{ target_role }}) in ~{{ rb.elapsed | default('?') }}s"
