---
# tower/restart-vm-choice.yml
- name: Restart selected Proxmox VMs (via SSH to PVE nodes)
  hosts: localhost
  gather_facts: false

  # Espera recibir esto desde el Survey (Multiple Choice)
  vars:
    vm_keys_selected: "{{ vm_keys_selected | default([]) }}"
    pause_seconds: 120  # 2 minutos entre VMs

  pre_tasks:
    # === Traer proxmox_vms y pve_nodes desde cualquier host del inventario ===
    - name: Locate proxmox_vms dict anywhere in inventory
      set_fact:
        proxmox_vms_all: >-
          {{
            hostvars
            | dict2items
            | map(attribute='value.proxmox_vms')
            | select('defined')
            | list
            | first
            | default({})
          }}

    - name: Locate pve_nodes map anywhere in inventory
      set_fact:
        pve_nodes_all: >-
          {{
            hostvars
            | dict2items
            | map(attribute='value.pve_nodes')
            | select('defined')
            | list
            | first
            | default({})
          }}

    - name: Sanity check inventory variables were found
      assert:
        that:
          - proxmox_vms_all | length > 0
          - pve_nodes_all   | length > 0
        fail_msg: >-
          Could not find 'proxmox_vms' and/or 'pve_nodes' in inventory.
          Please ensure they are present in group/host/inventory vars.

    - name: Build list of all known VM keys
      set_fact:
        all_vm_keys: "{{ proxmox_vms_all | dict2items | map(attribute='key') | list | sort }}"

    - name: Validate survey selection (not empty, not all, and valid keys)
      assert:
        that:
          - vm_keys_selected is sequence
          - vm_keys_selected | length > 0
          - vm_keys_selected | length < all_vm_keys | length
          - (vm_keys_selected | difference(all_vm_keys)) | length == 0
        fail_msg: >-
          Invalid selection. Choose at least one VM, not all, and only from:
          {{ all_vm_keys | join(', ') }}

    - name: Build selected VM objects (key + value)
      set_fact:
        selected_vms: >-
          {{
            proxmox_vms_all
            | dict2items
            | selectattr('key','in', vm_keys_selected)
            | list
          }}

    - name: Show execution plan
      debug:
        msg: |-
          Will reboot (with {{ pause_seconds }}s pause between each):
          {{ selected_vms | map(attribute='key') | join(', ') }}

  tasks:
    - name: Reboot VM gracefully on its PVE node
      delegate_to: "{{ pve_nodes_all[item.value.pve_node] }}"
      become: true
      vars:
        vmid: "{{ item.value.vmid }}"
        vm_name: "{{ item.key }}"
        pve_node: "{{ item.value.pve_node }}"
      ansible.builtin.shell: |
        set -euo pipefail
        echo "Rebooting {{ vm_name }} (vmid={{ vmid }}) on {{ pve_node }}..."
        qm reboot {{ vmid }}
      loop: "{{ selected_vms }}"
      loop_control:
        label: "{{ item.key }} -> {{ item.value.pve_node }} (vmid={{ item.value.vmid }})"

    - name: Pause between VMs
      ansible.builtin.pause:
        seconds: "{{ pause_seconds }}"
      loop: "{{ selected_vms }}"
      loop_control:
        label: "{{ item.key }}"
