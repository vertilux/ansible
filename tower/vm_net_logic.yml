# File: vm_net_logic.yml
---
# Task 1a: Get current VM network configuration via SSH
- name: "1a. Get net0 configuration line"
  ansible.builtin.shell: "qm config {{ vm_vmid }} | grep net0"
  delegate_to: "{{ pve_host_ip }}"
  vars:
    ansible_user: root
  register: qm_config_output
  
# Task 1b: Process and clean configuration to determine status
- name: "1b. Extract, clean, and determine current state"
  ansible.builtin.set_fact:
    # Full configuration line (e.g., virtio=...,bridge=...,tag=6)
    net0_config_full: "{{ qm_config_output.stdout | regex_replace('^net0: ', '') | trim }}"
    # Check if 'link_down=1' exists, which means the network is currently disconnected
    is_currently_down: "{{ 'link_down=1' in qm_config_output.stdout }}"
    # Clean configuration (removes existing link_down=0 or link_down=1)
    net0_config_clean: "{{ qm_config_output.stdout | regex_replace('^net0: ', '') | regex_replace(',link_down=[01]', '') | trim }}"

# ----------------------------------------------------
# A. LOGIC: NET_OFF (Disconnect)
# ----------------------------------------------------
- name: "2a. [NET_OFF] Execute: Disconnect network (set link_down=1)"
  ansible.builtin.command: "qm set {{ vm_vmid }} --net0 {{ net0_config_clean }},link_down=1"
  delegate_to: "{{ pve_host_ip }}"
  vars:
    ansible_user: root
  when: 
    - net_action == 'net_off'
    - not is_currently_down # ONLY act if it is currently UP
  register: net_action_result

- name: "2b. [NET_OFF] Notify: Network was already OFF"
  ansible.builtin.debug:
    msg: "WARNING: Network for {{ vm_name | upper }} was already OFF (link_down=1). No change was made."
  when: 
    - net_action == 'net_off'
    - is_currently_down # Notify if it was already DOWN

# ----------------------------------------------------
# B. LOGIC: NET_ON (Connect)
# ----------------------------------------------------
- name: "3a. [NET_ON] Execute: Connect network (remove link_down)"
  ansible.builtin.command: "qm set {{ vm_vmid }} --net0 {{ net0_config_clean }}"
  delegate_to: "{{ pve_host_ip }}"
  vars:
    ansible_user: root
  when: 
    - net_action == 'net_on'
    - is_currently_down # ONLY act if it is currently DOWN
  register: net_action_result

- name: "3b. [NET_ON] Notify: Network was already ON"
  ansible.builtin.debug:
    msg: "WARNING: Network for {{ vm_name | upper }} was already ON (link_down=0 or absent). No change was made."
  when: 
    - net_action == 'net_on'
    - not is_currently_down # Notify if it was already UP

# ----------------------------------------------------
# C. Success Notification (If an action was taken)
# ----------------------------------------------------
- name: "4. Notify successful action"
  ansible.builtin.debug:
    msg: "SUCCESS: Network for {{ vm_name | upper }} has been {% if net_action == 'net_off' %}DISCONNECTED{% else %}CONNECTED{% endif %}."
  when: 
    - net_action_result is defined 
    - net_action_result.changed # Only notify if the action task actually changed something
