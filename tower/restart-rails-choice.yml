---
- name: Restart selected Rails apps (Passenger) by touching restart.txt
  hosts: app_servers
  become: yes
  gather_facts: no

  vars:
    app_root: /home/deploy
    app_prefix: erp

    # Catálogo completo (sin el prefijo "erp-")
    apps_all:
      - accltd
      - bzidat
      - espdat
      - mxpdat
      - pwcdat
      - rdmdat
      - saldat
      - covdat
      - prndat
      - wepdat

  pre_tasks:
    # 1) Capturamos lo que venga del Survey (puede no existir)
    - name: Capture survey value if provided
      set_fact:
        survey_apps_raw: "{{ apps_selected }}"
      when: apps_selected is defined

    # 2) Si NO vino nada, dejamos lista vacía
    - name: Default to empty list when no survey value
      set_fact:
        apps_selected_list: []
      when: survey_apps_raw is not defined

    # 3) Si vino una secuencia (multi-select real), normalizamos quitando 'erp-' y espacios
    - name: Normalize survey (sequence -> list without prefix)
      set_fact:
        apps_selected_list: >-
          {{ survey_apps_raw | list
             | map('regex_replace', '^erp-', '')
             | map('trim')
             | list }}
      when: survey_apps_raw is defined and survey_apps_raw is sequence

    # 4) Si vino como texto (CSV), lo partimos y normalizamos
    - name: Normalize survey (CSV string -> list without prefix)
      set_fact:
        apps_selected_list: >-
          {{ (survey_apps_raw | string)
             | replace(' ', '')
             | split(',')
             | map('regex_replace', '^erp-', '')
             | reject('equalto','')
             | list }}
      when: survey_apps_raw is defined and survey_apps_raw is not sequence

    # 5) Lista final a usar: si no eligieron nada, usamos todas
    - name: Compute final app list
      set_fact:
        apps: "{{ (apps_selected_list | length > 0) | ternary(apps_selected_list, apps_all) }}"

    - name: Show target host and chosen apps
      debug:
        msg: "Host {{ inventory_hostname }} → will restart: {{ apps | join(', ') }}"

  tasks:
    - name: Ensure Passenger tmp dir exists (per app)
      file:
        path: "{{ app_root }}/{{ app_prefix }}-{{ item }}/current/tmp"
        state: directory
        owner: deploy
        group: deploy
        mode: "0775"
      loop: "{{ apps }}"
      loop_control:
        label: "{{ app_prefix }}-{{ item }}"
      tags: [ensure_tmp]

    - name: Touch restart.txt (Passenger rolling restart)
      become_user: deploy
      file:
        path: "{{ app_root }}/{{ app_prefix }}-{{ item }}/current/tmp/restart.txt"
        state: touch
        modification_time: preserve
        access_time: preserve
      loop: "{{ apps }}"
      loop_control:
        label: "{{ app_prefix }}-{{ item }}"
      register: passenger_touch
      tags: [restart]

    - name: Report what was restarted on this host
      debug:
        msg: >
          Passenger restart triggered for apps: {{
            passenger_touch.results
            | map(attribute='item')
            | map('regex_replace', '^', app_prefix ~ '-')
            | join(', ')
          }}

    - name: Wait a short grace period
      wait_for:
        timeout: 5
      tags: [wait]
