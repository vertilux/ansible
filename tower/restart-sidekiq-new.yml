---
- name: Restart all active Sidekiq services (excluding beta)
  hosts: app_servers
  become: true
  serial: 1
  vars:
    redis_host: "104.236.33.109"
    redis_port: 6379
    sidekiq_exclude_regex: ".*-beta\\.service$"

  tasks:

    - name: Check Redis availability before restarting Sidekiq
      ansible.builtin.wait_for:
        host: "{{ redis_host }}"
        port: "{{ redis_port }}"
        timeout: 5
      register: redis_check
      failed_when: not redis_check.elapsed < 5
      ignore_errors: false

    - name: Discover all Sidekiq service units
      ansible.builtin.shell: >
        systemctl list-units --type=service --no-legend --all 'sidekiq-*.service' | awk '{print $1}'
      register: sidekiq_units_raw
      changed_when: false

    - name: Filter out excluded services (e.g. sidekiq-beta)
      ansible.builtin.set_fact:
        sidekiq_units: >-
          {{ sidekiq_units_raw.stdout_lines
             | reject('match', sidekiq_exclude_regex)
             | list }}

    - name: Show detected Sidekiq services
      ansible.builtin.debug:
        msg: "Detected Sidekiq services to restart: {{ sidekiq_units | join(', ') if sidekiq_units else 'none found' }}"

    - name: Restart each Sidekiq service (safe one-by-one)
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
        daemon_reload: true
      loop: "{{ sidekiq_units }}"
      register: restart_results
      failed_when: false

    - name: Verify all restarted services are active
      ansible.builtin.command: systemctl is-active {{ item }}
      loop: "{{ sidekiq_units }}"
      register: active_results
      failed_when: false

    - name: Display restart summary
      ansible.builtin.debug:
        msg: |
             ACTIVE: {{ active_results.results | selectattr('stdout','equalto','active') | map(attribute='item') | list }}
             FAILED: {{ active_results.results | rejectattr('stdout','equalto','active') | map(attribute='item') | list }}
