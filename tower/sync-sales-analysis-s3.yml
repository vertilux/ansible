---
- name: Sync ERP JSON files to AWS S3 from lb04 (no external collections)
  hosts: all
  become: yes
  gather_facts: no

  vars:
    # Lista única de compañías (subcarpetas en /home/deploy)
    companies:
      - erp-accltd
      - erp-bzidat
      - erp-espdat
      - erp-mxpdat
      - erp-pwcdat
      - erp-rdmdat
      - erp-saldat
      - erp-covdat
      - erp-prndat
      - erp-wepdat
    region: "us-east-1"
    s3_prefix: "json"
    json_relpath: "current/public/json"

    # Variables esperadas como Extra Vars o Credenciales de tipo "Machine" / "Cloud":
    # aws_access_key: "AKIA...."
    # aws_secret_key: "...."
    # bucket: "erp-accpac"
    #
    # Slack opcional (sin colecciones):
    # slack_token: "xoxb-..."       # (Opcional)
    # slack_channel: "#it-alerts"   # (Opcional)

  pre_tasks:
    - name: Assert required AWS vars
      ansible.builtin.assert:
        that:
          - aws_access_key is defined
          - aws_secret_key is defined
          - bucket is defined
        fail_msg: "Missing aws_access_key / aws_secret_key / bucket. Pass them as Extra Vars or bind a credential."

    - name: Show plan (host + companies)
      ansible.builtin.debug:
        msg: "Host {{ inventory_hostname }} will sync JSONs for: {{ companies | join(', ') }} to s3://{{ bucket }}/{{ s3_prefix }}/"

  tasks:
    - name: Ensure AWS CLI is present (Debian/Ubuntu)
      ansible.builtin.apt:
        name: awscli
        state: present
        update_cache: yes
      register: awscli_install
      changed_when: awscli_install.cache_updated or awscli_install.changed
      failed_when: false

    - name: Check AWS CLI availability
      ansible.builtin.command: aws --version
      register: awscli_check
      changed_when: false
      failed_when: awscli_check.rc != 0

    - name: Sync JSONs for each company to S3
      ansible.builtin.shell: |
        set -euo pipefail
        SRC="/home/deploy/{{ item }}/{{ json_relpath }}"
        if [ -d "$SRC" ]; then
          AWS_ACCESS_KEY_ID="{{ aws_access_key }}" \
          AWS_SECRET_ACCESS_KEY="{{ aws_secret_key }}" \
          aws s3 sync "$SRC" "s3://{{ bucket }}/{{ s3_prefix }}/" \
            --region "{{ region }}" \
            --acl public-read \
            --exclude "*" --include "*.json"
          echo "OK: {{ item }} synced."
        else
          echo "SKIP: {{ item }} (path not found: $SRC)"
        fi
      args:
        executable: /bin/bash
      loop: "{{ companies }}"
      register: sync_results
      changed_when: "'synced.' in (sync_results.stdout | default(''))"
      failed_when: false

    - name: Summarize sync results
      ansible.builtin.debug:
        msg: |
          Results:
          {% for r in sync_results.results %}
          - {{ r.item }} => rc={{ r.rc }} 
            stdout: {{ (r.stdout | default('') ) | trim }}
            stderr: {{ (r.stderr | default('') ) | trim }}
          {% endfor %}

  post_tasks:
    - name: Send Slack notification (optional, only if token+channel provided)
      ansible.builtin.uri:
        url: https://slack.com/api/chat.postMessage
        method: POST
        headers:
          Authorization: "Bearer {{ slack_token }}"
          Content-Type: "application/json; charset=utf-8"
        body_format: json
        body:
          channel: "{{ slack_channel }}"
          text: >-
            S3 Sync finished on {{ inventory_hostname }} for bucket '{{ bucket }}/{{ s3_prefix }}'.
            {% set failed = sync_results.results | selectattr('rc','ne',0) | list %}
            {% if failed | length > 0 %}
            Some items reported non-zero rc. Check job log for details.
            {% else %}
            All items executed without shell error.
            {% endif %}
      when:
        - slack_token is defined
        - slack_channel is defined
      register: slack_resp
      failed_when: false

    - name: Show Slack API response (if any)
      ansible.builtin.debug:
        var: slack_resp.json
      when: slack_resp is defined
