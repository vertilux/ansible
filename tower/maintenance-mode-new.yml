---
- name: Toggle / set maintenance mode for a single company
  hosts: app_servers
  become: yes
  gather_facts: false

  # Survey variables expected:
  # - app: company code (e.g. accltd, bzidat, espdat, mxpdat, pwcdat, rdmdat, saldat, covdat, prndat, wepdat)
  # - op:  "on" | "off" | "toggle"
  vars:
    rbenv_path: "/home/deploy/.rbenv/plugins/ruby-build/bin:/home/deploy/.rbenv/bin:/home/deploy/.rbenv/shims:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  pre_tasks:
    - name: Validate survey inputs
      assert:
        that:
          - app is defined
          - app | length > 0
          - op is defined
          - op in ['on','off','toggle']
        fail_msg: "Survey must provide 'app' (company code) and 'op' in [on, off, toggle]."

    - name: Show plan
      debug:
        msg: "Host={{ inventory_hostname }} | app={{ app }} | op={{ op }}"

  tasks:
    - name: Define app paths
      set_fact:
        app_name: "erp-{{ app }}"
        app_root: "/home/deploy/erp-{{ app }}/current"
        maintenance_file: "/home/deploy/erp-{{ app }}/current/tmp/maintenance.yml"

    - name: Check if app exists on this host
      stat:
        path: "{{ app_root }}"
      register: app_dir

    - name: Skip if app is not present here
      debug:
        msg: "Skipping {{ app_name }} on {{ inventory_hostname }} (app not present on this host)."
      when: not app_dir.stat.exists

    - name: Read .rbenv-vars if present
      slurp:
        path: "{{ app_root }}/.rbenv-vars"
      register: rbenv_vars_file
      when: app_dir.stat.exists
      ignore_errors: true

    - name: Compute RAILS_ENV (prefer .rbenv-vars, fallback to company code)
      set_fact:
        rails_env_current_app: >-
          {{
            (rbenv_vars_file.content | default('') | b64decode | regex_search('(?m)^RAILS_ENV=(.+)$', '\1'))
            | default(app)
          }}
      when: app_dir.stat.exists

    - name: Show effective RAILS_ENV
      debug:
        msg: "App {{ app_name }} -> RAILS_ENV={{ rails_env_current_app }}"
      when: app_dir.stat.exists

    - name: Check current maintenance status
      stat:
        path: "{{ maintenance_file }}"
      register: maint_stat
      when: app_dir.stat.exists

    - name: Decide target operation
      set_fact:
        _do_start: "{{ (op == 'on') or (op == 'toggle' and not maint_stat.stat.exists) }}"
        _do_end:   "{{ (op == 'off') or (op == 'toggle' and maint_stat.stat.exists) }}"
      when: app_dir.stat.exists

    - name: Start maintenance (idempotent)
      become_user: deploy
      environment:
        PATH: "{{ rbenv_path }}"
      args:
        chdir: "{{ app_root }}"
      shell: >
        /bin/bash -lc 'bundle exec rake RAILS_ENV={{ rails_env_current_app }} maintenance:start'
      register: start_out
      changed_when: "'invoke' in (start_out.stdout|default('')) or 'Executed' in (start_out.stdout|default(''))"
      when:
        - app_dir.stat.exists
        - _do_start

    - name: End maintenance (idempotent)
      become_user: deploy
      environment:
        PATH: "{{ rbenv_path }}"
      args:
        chdir: "{{ app_root }}"
      shell: >
        /bin/bash -lc 'bundle exec rake RAILS_ENV={{ rails_env_current_app }} maintenance:end'
      register: end_out
      changed_when: "'invoke' in (end_out.stdout|default('')) or 'Executed' in (end_out.stdout|default(''))"
      when:
        - app_dir.stat.exists
        - _do_end

    - name: Report result
      debug:
        msg: >-
          {{ app_name }} on {{ inventory_hostname }} |
          present={{ app_dir.stat.exists }} |
          maintenance file existed before={{ maint_stat.stat.exists | default('n/a') }} |
          op={{ op }} |
          started={{ _do_start | default(false) }} |
          ended={{ _do_end | default(false) }}
      when: app_dir.stat.exists
