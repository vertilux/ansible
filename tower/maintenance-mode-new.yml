---
- name: Toggle / set maintenance mode per company (survey-driven, human names supported)
  hosts: app_servers
  become: yes
  gather_facts: false

  # Survey variables esperadas:
  # - op: "on" | "off" | "toggle"
  # - companies: lista tipo ["Vertilux, LTD - Miami (accltd)", "espdat", ...]
  vars:
    # code -> nombre humano
    company_map:
      accltd: "Vertilux, LTD - Miami"
      bzidat: "Inpec - Brazil"
      espdat: "VTX Blinds, S.L - Spain"
      mxpdat: "Vertisol - Mexico"
      pwcdat: "Selca - Panama"
      rdmdat: "Dopeco - Dominican"
      saldat: "VTX Windows Covering - El Salvador"
      covdat: "Superco - Colombia"
      prndat: "Verticolor - Puerto Rico"
      wepdat: "Windows Covering - Panama"

    # PATH para que bundle/rake funcionen como deploy/rbenv
    rbenv_path: "/home/deploy/.rbenv/plugins/ruby-build/bin:/home/deploy/.rbenv/bin:/home/deploy/.rbenv/shims:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  pre_tasks:
    - name: Validate survey inputs
      assert:
        that:
          - op is defined
          - op in ['on','off','toggle']
          - companies is defined
          - companies | length > 0
        fail_msg: "Survey must provide 'op' in [on, off, toggle] and a non-empty 'companies' list."

    - name: Normalize company inputs to codes (accept 'Name (code)' or plain code)
      vars: { _codes: [] }
      set_fact:
        companies_codes: "{{ (_codes + [ (item | regex_search('\\(([^)]+)\\)', '\\1')) | default(item) | lower | trim ]) }}"
      loop: "{{ companies }}"
      loop_control:
        label: "{{ item }}"

    - name: Validate all normalized codes are known
      assert:
        that:
          - (companies_codes | difference(company_map.keys())) | length == 0
        fail_msg: >-
          Unknown company code in selection: {{ (companies_codes | difference(company_map.keys())) | join(', ') }}.
          Valid codes are: {{ company_map.keys() | list | join(', ') }}

    - name: Show plan (operation and targets)
      debug:
        msg: >-
          op={{ op }} |
          Companies={{ companies_codes | map('regex_replace','^(.*)$', company_map.get('\\1') ~ ' (\\1)') | list | join(', ') }} |
          Host={{ inventory_hostname }}

  tasks:
    - name: Check if each app exists on this host
      stat:
        path: "/home/deploy/erp-{{ code }}/current"
      register: app_stats
      loop: "{{ companies_codes }}"
      loop_control:
        loop_var: code
        label: "{{ company_map[code] | default(code) }} ({{ code }})"

    - name: Check current maintenance file existence
      stat:
        path: "/home/deploy/erp-{{ code }}/current/tmp/maintenance.yml"
      register: maint_stats
      loop: "{{ companies_codes }}"
      loop_control:
        loop_var: code
        label: "{{ company_map[code] | default(code) }} ({{ code }})"

    - name: Show which apps are present on this host
      debug:
        msg: >-
          Present here: {{
            companies_codes
            | select('equalto', companies_codes[0]) | list | length
            | ternary('', '')
          }}
      when: false  # (placeholder para mantener estructura; la info Ãºtil viene en la siguiente tarea)

    - name: List present apps (human + code)
      debug:
        msg: >-
          {{ company_map[item.0] | default(item.0) }} ({{ item.0 }}) present={{ item.1.stat.exists }}
      loop: "{{ companies_codes | zip(app_stats.results) | list }}"

    # --------- START maintenance for those that need it ---------
    - name: Start maintenance where applicable
      become_user: deploy
      environment:
        PATH: "{{ rbenv_path }}"
      args:
        chdir: "/home/deploy/erp-{{ code }}/current"
      shell: >
        /bin/bash -lc '
          RENV=$(grep -m1 "^RAILS_ENV=" .rbenv-vars 2>/dev/null | cut -d= -f2);
          RENV=${RENV:-{{ code }}};
          bundle exec rake RAILS_ENV=$RENV maintenance:start
        '
      register: start_out
      changed_when: "'invoke' in (start_out.stdout|default('')) or 'Executed' in (start_out.stdout|default(''))"
      loop: "{{ companies_codes }}"
      loop_control:
        loop_var: code
        index_var: idx
        label: "{{ company_map[code] | default(code) }} ({{ code }})"
      when:
        - app_stats.results[idx].stat.exists
        - op == 'on' or (op == 'toggle' and not maint_stats.results[idx].stat.exists)

    # --------- END maintenance for those that need it ---------
    - name: End maintenance where applicable
      become_user: deploy
      environment:
        PATH: "{{ rbenv_path }}"
      args:
        chdir: "/home/deploy/erp-{{ code }}/current"
      shell: >
        /bin/bash -lc '
          RENV=$(grep -m1 "^RAILS_ENV=" .rbenv-vars 2>/dev/null | cut -d= -f2);
          RENV=${RENV:-{{ code }}};
          bundle exec rake RAILS_ENV=$RENV maintenance:end
        '
      register: end_out
      changed_when: "'invoke' in (end_out.stdout|default('')) or 'Executed' in (end_out.stdout|default(''))"
      loop: "{{ companies_codes }}"
      loop_control:
        loop_var: code
        index_var: idx
        label: "{{ company_map[code] | default(code) }} ({{ code }})"
      when:
        - app_stats.results[idx].stat.exists
        - op == 'off' or (op == 'toggle' and maint_stats.results[idx].stat.exists)

    - name: Report result per company
      debug:
        msg: >-
          {{ company_map[code] | default(code) }} ({{ code }}) on {{ inventory_hostname }} |
          present={{ app_stats.results[idx].stat.exists }} |
          maint_file_before={{ maint_stats.results[idx].stat.exists | default('n/a') }} |
          op={{ op }} |
          started={{ (op == 'on') or (op == 'toggle' and not maint_stats.results[idx].stat.exists) }}
          ended={{ (op == 'off') or (op == 'toggle' and maint_stats.results[idx].stat.exists) }}
      loop: "{{ companies_codes }}"
      loop_control:
        loop_var: code
        index_var: idx
        label: "{{ company_map[code] | default(code) }} ({{ code }})"
