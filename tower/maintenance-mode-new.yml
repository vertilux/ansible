---
- name: Toggle / set maintenance mode per company (survey-driven)
  hosts: app_servers
  become: yes
  gather_facts: false

  # Survey variables esperadas:
  # - op: "on" | "off" | "toggle"
  # - companies: lista como ["accltd","espdat",...]
  vars:
    # PATH de rbenv para que `bundle` y `rake` funcionen como usuario deploy
    rbenv_path: "/home/deploy/.rbenv/plugins/ruby-build/bin:/home/deploy/.rbenv/bin:/home/deploy/.rbenv/shims:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    # (opcional) lista blanca para validar compañías y evitar typos
    valid_companies: [accltd,bzidat,espdat,mxpdat,pwcdat,rdmdat,saldat,covdat,prndat,wepdat]

  pre_tasks:
    - name: Validate survey inputs
      assert:
        that:
          - op is defined
          - op in ['on','off','toggle']
          - companies is defined
          - companies | length > 0
          - (companies | difference(valid_companies)) | length == 0
        fail_msg: >-
          Survey must provide 'op' in [on, off, toggle] and a non-empty 'companies' list.
          Unknown company in 'companies'. Valid: {{ valid_companies | join(', ') }}

    - name: Show plan (operation and target companies)
      debug:
        msg: "op={{ op }} | Companies={{ companies | join(', ') }} | Host={{ inventory_hostname }}"

  tasks:
    - name: Process each selected company
      block:
        - name: Define paths for this company
          set_fact:
            app_code: "{{ item }}"
            app_name: "erp-{{ item }}"
            app_root: "/home/deploy/erp-{{ item }}/current"
            maintenance_file: "/home/deploy/erp-{{ item }}/current/tmp/maintenance.yml"

        - name: Check if the app exists on this host
          stat:
            path: "{{ app_root }}"
          register: app_dir

        - name: Skip if the app is not present here
          debug:
            msg: "Skipping {{ app_name }} on {{ inventory_hostname }} (app not present)."
          when: not app_dir.stat.exists

        - name: Read .rbenv-vars if present
          slurp:
            path: "{{ app_root }}/.rbenv-vars"
          register: rbenv_vars_file
          when: app_dir.stat.exists
          ignore_errors: true

        - name: Compute effective RAILS_ENV (prefer .rbenv-vars, else fallback to company code)
          set_fact:
            rails_env_current_app: >-
              {{
                (rbenv_vars_file.content | default('') | b64decode
                  | regex_search('(?m)^RAILS_ENV=(.+)$', '\1'))
                | default(app_code)
              }}
          when: app_dir.stat.exists

        - name: Show effective RAILS_ENV for this app
          debug:
            msg: "App {{ app_name }} -> RAILS_ENV={{ rails_env_current_app }}"
          when: app_dir.stat.exists

        - name: Check current maintenance status (file presence)
          stat:
            path: "{{ maintenance_file }}"
          register: maint_stat
          when: app_dir.stat.exists

        - name: Decide desired action for this app
          set_fact:
            _do_start: "{{ (op == 'on') or (op == 'toggle' and not maint_stat.stat.exists) }}"
            _do_end:   "{{ (op == 'off') or (op == 'toggle' and maint_stat.stat.exists) }}"
          when: app_dir.stat.exists

        - name: Start maintenance (idempotent)
          become_user: deploy
          environment:
            PATH: "{{ rbenv_path }}"
          args:
            chdir: "{{ app_root }}"
          shell: >
            /bin/bash -lc 'bundle exec rake RAILS_ENV={{ rails_env_current_app }} maintenance:start'
          register: start_out
          changed_when: "'invoke' in (start_out.stdout|default('')) or 'Executed' in (start_out.stdout|default(''))"
          when:
            - app_dir.stat.exists
            - _do_start

        - name: End maintenance (idempotent)
          become_user: deploy
          environment:
            PATH: "{{ rbenv_path }}"
          args:
            chdir: "{{ app_root }}"
          shell: >
            /bin/bash -lc 'bundle exec rake RAILS_ENV={{ rails_env_current_app }} maintenance:end'
          register: end_out
          changed_when: "'invoke' in (end_out.stdout|default('')) or 'Executed' in (end_out.stdout|default(''))"
          when:
            - app_dir.stat.exists
            - _do_end

        - name: Report result for this app
          debug:
            msg: >-
              {{ app_name }} on {{ inventory_hostname }} |
              RAILS_ENV={{ rails_env_current_app }} |
              maintenance file exists={{ maint_stat.stat.exists | default('n/a') }} |
              started={{ _do_start | default(false) }} |
              ended={{ _do_end | default(false) }}
      loop: "{{ companies }}"
      loop_control:
        label: "{{ item }}"
