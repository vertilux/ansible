---
- name: Toggle/set ERP maintenance mode per company (survey-driven)
  hosts: app_servers
  become: yes
  gather_facts: no

  vars:
    # Catalog: code -> human label
    apps_catalog:
      erp-accltd: "Vertilux, LTD - Miami"
      erp-bzidat: "Inpec - Brazil"
      erp-espdat: "VTX Blinds, S.L - Spain"
      erp-mxpdat: "Vertisol - Mexico"
      erp-pwcdat: "Selca - Panama"
      erp-rdmdat: "Dopeco - Dominican"
      erp-saldat: "VTX Windows Covering - El Salvador"
      erp-covdat: "Superco - Colombia"
      erp-prndat: "Verticolor - Puerto Rico"
      erp-wepdat: "Windows Covering - Panama"

    # Friendly aliases (case-insensitive inputs from the survey) -> canonical app code
    aliases:
      vertilux: erp-accltd
      miami: erp-accltd

      inpec: erp-bzidat
      brazil: erp-bzidat
      brasil: erp-bzidat

      spain: erp-espdat
      españa: erp-espdat
      espana: erp-espdat
      vtx spain: erp-espdat

      mexico: erp-mxpdat
      méxico: erp-mxpdat
      mex: erp-mxpdat
      vertisol: erp-mxpdat

      panama: erp-pwcdat
      selca: erp-pwcdat

      dominican: erp-rdmdat
      dominicana: erp-rdmdat
      dopeco: erp-rdmdat
      rd: erp-rdmdat

      el salvador: erp-saldat
      salvador: erp-saldat
      vtx el salvador: erp-saldat

      colombia: erp-covdat
      superco: erp-covdat

      puerto rico: erp-prndat
      pr: erp-prndat
      verticolor: erp-prndat

      wep: erp-wepdat
      "windows covering panama": erp-wepdat
      wc panama: erp-wepdat

    # ===== Variables provided by Survey =====
    # op: on | off | toggle
    op: "{{ op | default('toggle') }}"
    # targets: list of strings (aliases or app codes). Example from Survey: ["Spain","Mexico"] or ["erp-espdat","erp-mxpdat"]
    targets: "{{ targets | default([]) }}"

    # rbenv PATH to run rake
    ruby_env_path: "/home/deploy/.rbenv/plugins/ruby-build/bin:/home/deploy/.rbenv/bin:/home/deploy/.rbenv/shims:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  pre_tasks:
    - name: Validate operation (op)
      assert:
        that:
          - op in ['on','off','toggle']
        fail_msg: "Invalid op '{{ op }}'. Use one of: on, off, toggle."
        success_msg: "Operation '{{ op }}' is valid."

    - name: Fail if no targets provided
      assert:
        that:
          - (targets | length) > 0
        fail_msg: "No targets provided. Please select at least one company/app in the Survey."
        success_msg: "Targets received: {{ targets }}"

    - name: Normalize targets to canonical app codes
      set_fact:
        resolved_apps: >-
          {{
            targets
            | map('lower')
            | map('trim')
            | map('regex_replace','\\s+',' ')
            | map('extract', aliases, default=None)
            | list
          }}
      vars:
        # helper filter: if not found in aliases, keep original as-is (might already be a code)
        aliases: "{{ aliases | combine( apps_catalog | dict2items | map(attribute='key') | list | items2dict ) }}"
      # The combine above ensures codes like "erp-espdat" pass-through.

    - name: Replace None entries (not in aliases) with original inputs (for those that already were codes)
      set_fact:
        resolved_apps: >-
          {{
            resolved_apps | zip(targets) | map('list') | map('last') | list
            if (resolved_apps | select('equalto', None) | list | length) == (targets | length)
            else resolved_apps | zip(targets) | map('list') | map('first') | list
          }}

    - name: Validate that all resolved apps exist in catalog
      assert:
        that:
          - (resolved_apps | select('in', apps_catalog.keys()) | list | length) == (resolved_apps | length)
        fail_msg: >-
          One or more targets are invalid: {{ resolved_apps }}.
          Valid choices: {{ apps_catalog.keys() | sort | join(', ') }}
        success_msg: "Resolved apps: {{ resolved_apps }}"

    - name: Show plan (target apps and operation)
      debug:
        msg: >-
          Host {{ inventory_hostname }} → will apply '{{ op }}' to:
          {{ resolved_apps | map('regex_replace','^',' - ') | list | join('\n') }}

  tasks:
    - name: Stat maintenance flag (per app)
      stat:
        path: "/home/deploy/{{ item }}/current/tmp/maintenance.yml"
      loop: "{{ resolved_apps }}"
      loop_control:
        label: "{{ item }}"
      register: mflags

    - name: Start maintenance (only when needed)  # op: on
      command: /bin/bash -l -c 'cd /home/deploy/{{ item }}/current && bundle exec rake RAILS_ENV=production maintenance:start'
      environment:
        PATH: "{{ ruby_env_path }}"
      loop: "{{ resolved_apps }}"
      loop_control:
        label: "{{ item }}"
      when:
        - op == 'on'
        - not (mflags.results | selectattr('item','equalto',item) | map(attribute='stat.exists') | first | default(false))

    - name: End maintenance (only when needed)    # op: off
      command: /bin/bash -l -c 'cd /home/deploy/{{ item }}/current && bundle exec rake RAILS_ENV=production maintenance:end'
      environment:
        PATH: "{{ ruby_env_path }}"
      loop: "{{ resolved_apps }}"
      loop_control:
        label: "{{ item }}"
      when:
        - op == 'off'
        - (mflags.results | selectattr('item','equalto',item) | map(attribute='stat.exists') | first | default(false))

    - name: Toggle maintenance (switch based on current flag)  # op: toggle
      command: >-
        /bin/bash -l -c 'cd /home/deploy/{{ item }}/current && bundle exec rake
        RAILS_ENV=production maintenance:{{
          (mflags.results | selectattr("item","equalto",item) | map(attribute="stat.exists") | first | default(false))
          | ternary("end","start")
        }}'
      environment:
        PATH: "{{ ruby_env_path }}"
      loop: "{{ resolved_apps }}"
      loop_control:
        label: "{{ item }}"
      when: op == 'toggle'

    - name: Re-check maintenance flag after operation
      stat:
        path: "/home/deploy/{{ item }}/current/tmp/maintenance.yml"
      loop: "{{ resolved_apps }}"
      loop_control:
        label: "{{ item }}"
      register: mflags_after

    - name: Summary per app (ON/OFF)
      debug:
        msg: >-
          {{ item.item }} ({{ apps_catalog[item.item] | default(item.item) }}):
          maintenance = {{
            (item.stat.exists | default(false)) | ternary('ON','OFF')
          }}
      loop: "{{ mflags_after.results }}"
      loop_control:
        label: "{{ item.item }}"
