---
- name: Toggle / set maintenance mode for one or more companies (survey-driven)
  hosts: app_servers
  become: yes
  gather_facts: false

  # Survey variables expected:
  # - companies (Multiple choice, required): e.g. accltd, bzidat, espdat, mxpdat, pwcdat, rdmdat, saldat, covdat, prndat, wepdat
  # - op        (Multiple choice, required): on | off | toggle
  vars:
    rbenv_path: "/home/deploy/.rbenv/plugins/ruby-build/bin:/home/deploy/.rbenv/bin:/home/deploy/.rbenv/shims:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  pre_tasks:
    - name: Validate survey inputs
      assert:
        that:
          - companies is defined
          - companies | length > 0
          - op is defined
          - op in ['on','off','toggle']
        fail_msg: "Survey must provide 'companies' (one or more codes) and 'op' in [on, off, toggle]."

    - name: Show plan
      debug:
        msg: "Host={{ inventory_hostname }} | op={{ op }} | Companies={{ companies | join(', ') }}"

  tasks:
    - name: Check if app exists on this host
      stat:
        path: "/home/deploy/erp-{{ app }}/current"
      register: app_dir
      loop: "{{ companies }}"
      loop_control:
        loop_var: app

    - name: Read .rbenv-vars if present
      slurp:
        path: "/home/deploy/erp-{{ app }}/current/.rbenv-vars"
      register: rbenv_vars_file
      when: app_dir.results[loop.index0].stat.exists
      ignore_errors: true
      loop: "{{ companies }}"
      loop_control:
        loop_var: app

    - name: Compute RAILS_ENV (prefer .rbenv-vars, fallback to company code)
      set_fact:
        "rails_env_{{ app }}": >-
          {{
            ( (rbenv_vars_file.results[loop.index0].content | default('')) 
              | b64decode 
              | regex_search('(?m)^RAILS_ENV=(.+)$', '\1') )
            | default(app)
          }}
      when: app_dir.results[loop.index0].stat.exists
      loop: "{{ companies }}"
      loop_control:
        loop_var: app

    - name: Show effective RAILS_ENV
      debug:
        msg: "App erp-{{ app }} -> RAILS_ENV={{ hostvars[inventory_hostname]['rails_env_' ~ app] | default('n/a') }}"
      when: app_dir.results[loop.index0].stat.exists
      loop: "{{ companies }}"
      loop_control:
        loop_var: app

    - name: Check current maintenance status file
      stat:
        path: "/home/deploy/erp-{{ app }}/current/tmp/maintenance.yml"
      register: maint_stat
      when: app_dir.results[loop.index0].stat.exists
      loop: "{{ companies }}"
      loop_control:
        loop_var: app

    - name: Start maintenance if required
      become_user: deploy
      environment:
        PATH: "{{ rbenv_path }}"
      args:
        chdir: "/home/deploy/erp-{{ app }}/current"
      shell: >
        /bin/bash -lc 'bundle exec rake RAILS_ENV={{ hostvars[inventory_hostname]["rails_env_" ~ app] | default(app) }} maintenance:start'
      register: start_out
      changed_when: "'invoke' in (start_out.stdout|default('')) or 'Executed' in (start_out.stdout|default(''))"
      when:
        - app_dir.results[loop.index0].stat.exists
        - (op == 'on') or (op == 'toggle' and not maint_stat.results[loop.index0].stat.exists)
      loop: "{{ companies }}"
      loop_control:
        loop_var: app

    - name: End maintenance if required
      become_user: deploy
      environment:
        PATH: "{{ rbenv_path }}"
      args:
        chdir: "/home/deploy/erp-{{ app }}/current"
      shell: >
        /bin/bash -lc 'bundle exec rake RAILS_ENV={{ hostvars[inventory_hostname]["rails_env_" ~ app] | default(app) }} maintenance:end'
      register: end_out
      changed_when: "'invoke' in (end_out.stdout|default('')) or 'Executed' in (end_out.stdout|default(''))"
      when:
        - app_dir.results[loop.index0].stat.exists
        - (op == 'off') or (op == 'toggle' and maint_stat.results[loop.index0].stat.exists)
      loop: "{{ companies }}"
      loop_control:
        loop_var: app

    - name: Report per-app result
      debug:
        msg: >-
          erp-{{ app }} on {{ inventory_hostname }} |
          present={{ app_dir.results[loop.index0].stat.exists }} |
          maintenance file existed before={{ (maint_stat.results[loop.index0].stat.exists if maint_stat.results is defined else 'n/a') }} |
          op={{ op }}
      loop: "{{ companies }}"
      loop_control:
        loop_var: app
