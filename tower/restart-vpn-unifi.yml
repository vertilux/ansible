---
- name: Restart chosen VPN tunnels on selected UniFi gateway
  hosts: localhost
  connection: local
  gather_facts: false
  become: false

  vars:
    # Survey variables
    unifi_gateway_ip: "10.255.255.1"       # Can be overridden by survey
    site: "default"
    selected_vpns: ["VXCALUDM"]            # Example value, replaced by survey

    # Credential-injected variables
    unifi_api_key: "{{ UNIFI_API_KEY }}"
    slack_webhook_url: "{{ SLACK_WEBHOOK_URL }}"

  tasks:

    - name: Send start notification to Slack
      ansible.builtin.uri:
        url: "{{ slack_webhook_url }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          text: |
            :gear: *Starting VPN restart sequence*
            Gateway: `{{ unifi_gateway_ip }}`
            VPN(s): `{{ selected_vpns | join(', ') }}`
      when: slack_webhook_url is defined
      ignore_errors: true

    - name: Attempt to pause VPN(s) via UniFi Integration API
      ansible.builtin.uri:
        url: "https://{{ unifi_gateway_ip }}/proxy/network/integration/v1/sites/{{ site }}/vpn/restart"
        method: POST
        headers:
          X-API-KEY: "{{ unifi_api_key }}"
          Accept: "application/json"
          Content-Type: "application/json"
        body_format: json
        body:
          vpn_names: "{{ selected_vpns }}"
          action: "pause"
        validate_certs: false
      register: pause_result
      failed_when: pause_result.status not in [200, 202]
      ignore_errors: true

    - name: Wait before re-enabling VPN(s)
      pause:
        seconds: 60

    - name: Resume VPN(s) via UniFi Integration API
      ansible.builtin.uri:
        url: "https://{{ unifi_gateway_ip }}/proxy/network/integration/v1/sites/{{ site }}/vpn/restart"
        method: POST
        headers:
          X-API-KEY: "{{ unifi_api_key }}"
          Accept: "application/json"
          Content-Type: "application/json"
        body_format: json
        body:
          vpn_names: "{{ selected_vpns }}"
          action: "resume"
        validate_certs: false
      register: resume_result
      failed_when: resume_result.status not in [200, 202]
      ignore_errors: true

    - name: Build Slack message
      set_fact:
        slack_message: >
          {% if (resume_result.status | default(0)) in [200, 202] %}
          ✅ *VPN restart completed successfully*
              Gateway: `{{ unifi_gateway_ip }}`
              VPN(s): `{{ selected_vpns | join(', ') }}`
          {% else %}
          ⚠️ *VPN restart failed!*
              Gateway: `{{ unifi_gateway_ip }}`
              VPN(s): `{{ selected_vpns | join(', ') }}`
          {% endif %}

    - name: Send Slack summary notification
      ansible.builtin.uri:
        url: "{{ slack_webhook_url }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          text: "{{ slack_message }}"
      when: slack_webhook_url is defined
      register: slack_response
      ignore_errors: true

    - name: Debug Slack response
      debug:
        var: slack_response
      when: slack_response is defined
