---
- name: Shutdown all VMs on a chosen Proxmox node
  hosts: localhost
  gather_facts: no

  vars:
    # tiempos
    per_shutdown_delay: 2           # seg entre cada VM/CT
    per_instance_timeout: 60        # seg de timeout por VM/CT

  pre_tasks:
    - name: Capture survey var safely (pve_node)
      set_fact:
        selected_node: "{{ vars['pve_node'] | default('', true) | string | trim }}"

    - name: Show what Survey provided
      debug:
        msg: "pve_node received='{{ selected_node }}'"

    - name: Validate pve_nodes is present in inventory
      assert:
        that:
          - pve_nodes is defined
          - pve_nodes | length > 0
        fail_msg: "Inventory must define 'pve_nodes' map (node -> IP)."

    - name: Validate survey node
      assert:
        that:
          - selected_node | length > 0
          - selected_node in (pve_nodes.keys() | list)
        fail_msg: "Survey must provide a valid node (pve20/pve30/pve50/pve70/pve80)."

    - name: Show target node and IP
      debug:
        msg: "Target node={{ selected_node }} at {{ pve_nodes[selected_node] }}"

  tasks:
    - name: List running VMs
      delegate_to: "{{ pve_nodes[selected_node] }}"
      become: true
      shell: "qm list | awk '/running/ {print $1}'"
      register: running_vms
      changed_when: false

    - name: List running containers (LXC)
      delegate_to: "{{ pve_nodes[selected_node] }}"
      become: true
      shell: "pct list | awk '/running/ {print $1}'"
      register: running_cts
      changed_when: false
      failed_when: false   # por si no hay LXC o pct

    - name: What is running
      debug:
        msg: |
          Node: {{ selected_node }}
          Running VMs: {{ running_vms.stdout_lines | default([]) }}
          Running CTs: {{ running_cts.stdout_lines | default([]) }}

    - name: Shutdown each VM (graceful, async)
      delegate_to: "{{ pve_nodes[selected_node] }}"
      become: true
      shell: |
        qm shutdown {{ item }} --timeout {{ per_instance_timeout }} || true
        sleep {{ per_shutdown_delay }}
      loop: "{{ running_vms.stdout_lines | default([]) }}"
      loop_control:
        label: "VM {{ item }}"
      async: "{{ per_instance_timeout + 10 }}"
      poll: 0
      when: (running_vms.stdout_lines | default([])) | length > 0

    - name: Shutdown each CT (graceful, async)
      delegate_to: "{{ pve_nodes[selected_node] }}"
      become: true
      shell: |
        pct shutdown {{ item }} --timeout {{ per_instance_timeout }} || true
        sleep {{ per_shutdown_delay }}
      loop: "{{ running_cts.stdout_lines | default([]) }}"
      loop_control:
        label: "CT {{ item }}"
      async: "{{ per_instance_timeout + 10 }}"
      poll: 0
      when: (running_cts.stdout_lines | default([])) | length > 0

    - name: Short grace period
      wait_for:
        timeout: 5
