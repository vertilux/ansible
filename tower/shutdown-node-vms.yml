---
- name: Shutdown all VMs on a chosen Proxmox node
  hosts: localhost
  gather_facts: no

  vars:
    # Survey must provide this: pve_node in [pve20, pve30, pve50, pve70, pve80]
    pve_node: "{{ pve_node | default('') }}"
    # segundos entre apagados de cada instancia (VM/CT)
    per_shutdown_delay: 2
    # espera total (segundos) a que una VM/CT se apague
    per_instance_timeout: 60

  pre_tasks:
    - name: Validate pve_nodes is present in inventory
      assert:
        that:
          - pve_nodes is defined
          - pve_nodes | length > 0
        fail_msg: "Inventory must define 'pve_nodes' map (node -> IP)."

    - name: Validate survey node
      assert:
        that:
          - pve_node | length > 0
          - pve_node in (pve_nodes.keys() | list)
        fail_msg: "Survey must provide a valid Proxmox node (pve20/pve30/pve50/pve70/pve80)."

    - name: Show target node and IP
      debug:
        msg: "Target node={{ pve_node }} at {{ pve_nodes[pve_node] }}"

  tasks:
    - name: Get list of running VMs
      delegate_to: "{{ pve_nodes[pve_node] }}"
      become: true
      shell: |
        set -e
        qm list | awk '/running/ {print $1}'
      register: running_vms
      changed_when: false

    - name: Get list of running containers
      delegate_to: "{{ pve_nodes[pve_node] }}"
      become: true
      shell: |
        set -e
        pct list | awk '/running/ {print $1}'
      register: running_cts
      changed_when: false
      failed_when: false  # por si no hay LXC o pct no estÃ¡ instalado

    - name: Show what is running on {{ pve_node }}
      debug:
        msg: |
          Node: {{ pve_node }}
          Running VMs: {{ running_vms.stdout_lines | default([]) }}
          Running CTs: {{ running_cts.stdout_lines | default([]) }}

    - name: Shutdown each VM gracefully (async fire-and-forget)
      delegate_to: "{{ pve_nodes[pve_node] }}"
      become: true
      shell: |
        qm shutdown {{ item }} --timeout {{ per_instance_timeout }} || true
        sleep {{ per_shutdown_delay }}
      loop: "{{ running_vms.stdout_lines | default([]) }}"
      loop_control:
        label: "VM {{ item }}"
      async: "{{ per_instance_timeout + 10 }}"
      poll: 0
      when: (running_vms.stdout_lines | default([])) | length > 0

    - name: Shutdown each CT gracefully (async fire-and-forget)
      delegate_to: "{{ pve_nodes[pve_node] }}"
      become: true
      shell: |
        pct shutdown {{ item }} --timeout {{ per_instance_timeout }} || true
        sleep {{ per_shutdown_delay }}
      loop: "{{ running_cts.stdout_lines | default([]) }}"
      loop_control:
        label: "CT {{ item }}"
      async: "{{ per_instance_timeout + 10 }}"
      poll: 0
      when: (running_cts.stdout_lines | default([])) | length > 0

    # Opcional: espera final corta
    - name: Short grace period
      wait_for:
        timeout: 5
