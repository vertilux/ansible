---
- name: Shutdown all VMs on a chosen Proxmox node
  hosts: localhost
  gather_facts: false

  # Estas dos variables llegan por Survey:
  # - pve_node_choice: pve20|pve30|pve50|pve70|pve80
  # - grace_seconds: segundos de gracia antes del stop forzado
  vars:
    pve_node: "{{ pve_node_choice | default('') }}"
    grace_seconds: "{{ (grace_seconds | default(120)) | int }}"

    # Leemos los mapas que ya tienes en inventory/group_vars
    # (proxmox_vms y pve_nodes). Si están en group_vars/ALL o pve,
    # Ansible los ve sin más; estas líneas solo garantizan el acceso.
    proxmox_vms_all: "{{ hostvars['localhost'].proxmox_vms | default(proxmox_vms, true) | default({}) }}"
    pve_nodes_all:   "{{ hostvars['localhost'].pve_nodes   | default(pve_nodes,   true) | default({}) }}"

  pre_tasks:
    - name: Validate node exists in pve_nodes
      assert:
        that:
          - pve_node != ''
          - pve_node in pve_nodes_all.keys()
          - proxmox_vms_all | length > 0
        fail_msg: "Survey must provide a valid Proxmox node (pve20/pve30/pve50/pve70/pve80) and inventory must expose proxmox_vms/pve_nodes."

    - name: Collect VMIDs that live on the chosen node
      set_fact:
        vms_on_node: >-
          {{ proxmox_vms_all
             | dict2items
             | selectattr('value.pve_node','equalto', pve_node)
             | map(attribute='value.vmid')
             | list | sort }}

    - name: Show plan
      debug:
        msg: "Node={{ pve_node }} -> VMIDs={{ vms_on_node | join(', ') }} | grace={{ grace_seconds }}s"

  tasks:
    - name: Shutdown VM {{ item }} on {{ pve_node }}
      delegate_to: "{{ pve_nodes_all[pve_node] }}"
      become: true
      vars:
        # Evita prompts de host key al delegar por SSH
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      shell: |
        set -euo pipefail

        # Si ya está parada, no hacemos nada
        if ! qm status {{ item }} | grep -q 'status: running'; then
          echo "already stopped"
          exit 0
        fi

        # Intento elegante
        qm shutdown {{ item }} --timeout {{ grace_seconds }} || true

        # Espera/poll en intervalos de 5s durante ~grace_seconds + 30s
        for i in $(seq 1 $(( {{ (grace_seconds/5) | round(0,'ceil') | int }} + 6 )) ); do
          sleep 5
          if qm status {{ item }} | grep -q 'status: stopped'; then
            echo "stopped gracefully"
            exit 0
          fi
        done

        # Último recurso
        qm stop {{ item }}

        # Chequeo final corto
        for i in $(seq 1 6); do
          sleep 5
          if qm status {{ item }} | grep -q 'status: stopped'; then
            echo "stopped forcefully"
            exit 0
          fi
        done

        echo "failed to stop"
        exit 1
      register: shut
      changed_when: true
      failed_when: shut.rc != 0
      loop: "{{ vms_on_node }}"
      loop_control:
        label: "vmid={{ item }}"

    - name: Summary
      debug:
        msg: "Shutdown attempted on node {{ pve_node }} for {{ vms_on_node | length }} VMs: {{ vms_on_node | join(', ') }}"
