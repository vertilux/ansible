---
- hosts: all
  gather_facts: no
  vars:
    # Variables de seguridad que se esperan como 'Extra Variables' en AWX/Ansible Tower
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ bucket }}"
    slack_token: "{{ slack_token }}"
    # Se inicializa una lista de fallos
    sync_failures: []
    
    # Lista fija de compañías (sites) a sincronizar
    companies:
      - erp-accltd
      - erp-bzidat
      - erp-espdat
      - erp-mxpdat
      - erp-pwcdat
      - erp-rdmdat
      - erp-saldat
      - erp-covdat
      - erp-prndat
      - erp-wepdat

  tasks:
    # 1. Tarea de sincronización: El 'loop' se aplica directamente a la tarea s3_sync
    - name: 🔄 S3 Sync | Upload files for each site
      ansible.builtin.s3_sync:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        bucket: '{{ bucket }}'
        region: 'us-east-1'
        # Ruta de origen dinámica
        file_root: "/home/deploy/{{ item }}/current/public/json/"
        # Prefijo S3 dinámico
        key_prefix: "json/{{ item }}"
        permission: public-read
        include: "*"
      # Se usa 'item' ya que estamos iterando directamente en la tarea
      loop: "{{ companies }}" 
      ignore_errors: yes
      register: s3_results
    
    # 2. Agregar compañías fallidas a una lista (para una única notificación de fallas)
    - name: 📝 Log failed synchronizations
      set_fact:
        sync_failures: "{{ sync_failures + [item.item] }}"
      # Se itera sobre todos los resultados y se añaden los que fallaron
      loop: "{{ s3_results.results }}"
      when: item.failed
    
    # 3. Notificación de Slack solo si hubo fallas
    - name: 🚨 Send FAILED notification for all failed sites via Slack
      community.general.slack:
        token: '{{ slack_token }}'
        color: danger
        msg: |
          🚨 Sales analysis synchronization **FAILED** on one or more sites (AWS S3).
          Failed sites: **{{ sync_failures | join(', ') }}**
      # La tarea de notificación se ejecuta UNA SOLA VEZ si la lista de fallas NO está vacía
      run_once: true
      when: sync_failures | length > 0

# SEGUNDO PLAY: Notificación final de éxito (solo si el primer play no tuvo errores fatales)

- hosts: localhost 
  tasks:
    # 4. Notificación final de éxito (se ejecuta si el primer play fue "exitoso" con o sin fallos ignorados)
    - name: ✅ Send SUCCESS/COMPLETION notification via Slack
      community.general.slack:
        token: '{{ slack_token }}'
        color: good
        msg: '✅ Sales analysis files successfully synchronized ({{ companies | length }} attempts) to AWS S3.'
